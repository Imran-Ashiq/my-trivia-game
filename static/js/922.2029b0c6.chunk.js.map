{"version":3,"file":"static/js/922.2029b0c6.chunk.js","mappings":"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","sources":["components/SettingsPanel.js","components/QuestionScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Panel = styled.div`\r\n  background: ${props => props.theme.background};\r\n  color: ${props => props.theme.color};\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst SettingsPanel = ({ onSettingsChange }) => {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [language, setLanguage] = useState('en');\r\n\r\n  useEffect(() => {\r\n    onSettingsChange({ darkMode, language });\r\n  }, [darkMode, language, onSettingsChange]);\r\n\r\n  const handleDarkModeChange = (e) => {\r\n    setDarkMode(e.target.checked);\r\n  };\r\n\r\n  const handleLanguageChange = (e) => {\r\n    setLanguage(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Panel>\r\n      <h2>Settings</h2>\r\n      <label>\r\n        Dark Mode:\r\n        <input type=\"checkbox\" checked={darkMode} onChange={handleDarkModeChange} />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Language:\r\n        <select value={language} onChange={handleLanguageChange}>\r\n          <option value=\"en\">English</option>\r\n          <option value=\"es\">Spanish</option>\r\n          <option value=\"fr\">French</option>\r\n          {/* Add more languages as needed */}\r\n        </select>\r\n      </label>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default SettingsPanel;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { motion } from 'framer-motion';\r\nimport useSound from 'use-sound';\r\nimport correctSound from '../sounds/correct.mp3';\r\nimport incorrectSound from '../sounds/incorrect.mp3';\r\nimport backgroundMusic from '../sounds/background.mp3';\r\nimport SettingsPanel from './SettingsPanel';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  background-color: ${props => props.theme.background};\r\n  color: ${props => props.theme.color};\r\n  font-family: Arial, sans-serif;\r\n  padding: 20px;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  font-size: 1.2em;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst QuestionCard = styled(motion.div)`\r\n  background: ${props => props.theme.background};\r\n  color: ${props => props.theme.color};\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  max-width: 600px;\r\n  width: 100%;\r\n  text-align: center;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst QuestionText = styled.p`\r\n  font-size: 1.2em;\r\n  margin-bottom: 20px;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 1em;\r\n  }\r\n`;\r\n\r\nconst AnswerButton = styled.button`\r\n  background: ${props => (props.$correct ? '#28a745' : props.$incorrect ? '#dc3545' : '#007bff')};\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  margin: 5px;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n\r\n  &:hover {\r\n    background: ${props => (props.$correct ? '#218838' : props.$incorrect ? '#c82333' : '#0056b3')};\r\n  }\r\n\r\n  &:focus {\r\n    outline: 3px solid #ffbf47;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 8px 16px;\r\n    margin: 3px;\r\n  }\r\n`;\r\n\r\nconst Timer = styled.p`\r\n  font-size: 1em;\r\n  color: ${props => props.theme.color};\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 0.9em;\r\n  }\r\n`;\r\n\r\nconst Score = styled.p`\r\n  font-size: 1em;\r\n  color: ${props => props.theme.color};\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 0.9em;\r\n  }\r\n`;\r\n\r\nconst ProgressBar = styled.div`\r\n  width: 100%;\r\n  background-color: #e0e0e0;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Progress = styled(motion.div)`\r\n  height: 10px;\r\n  background-color: #007bff;\r\n`;\r\n\r\nconst TimerBar = styled(motion.div)`\r\n  height: 10px;\r\n  background-color: #ff0000;\r\n`;\r\n\r\nconst SettingsButton = styled.button`\r\n  background: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n  margin-top: 20px;\r\n\r\n  &:hover {\r\n    background: #0056b3;\r\n  }\r\n`;\r\n\r\nconst HintButton = styled.button`\r\n  background: #ffc107;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n  margin-top: 20px;\r\n\r\n  &:hover {\r\n    background: #e0a800;\r\n  }\r\n`;\r\n\r\nconst QuestionScreen = ({ category, gameMode, timeLimit, endGame, darkMode, language, onSettingsChange }) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [timer, setTimer] = useState(gameMode === 'hard' ? 15 : timeLimit);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\r\n  const [hintUsed, setHintUsed] = useState(false);\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n\r\n  const [playCorrect] = useSound(correctSound);\r\n  const [playIncorrect] = useSound(incorrectSound);\r\n  const [playBackground, { stop }] = useSound(backgroundMusic, { loop: true });\r\n\r\n  useEffect(() => {\r\n    playBackground();\r\n    return () => stop();\r\n  }, [playBackground, stop]);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async (retryCount = 0) => {\r\n      try {\r\n        const cachedQuestions = localStorage.getItem(`questions_${category}`);\r\n        if (cachedQuestions) {\r\n          setQuestions(JSON.parse(cachedQuestions));\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const url = `https://opentdb.com/api.php?amount=10&category=${category}&type=multiple`;\r\n        console.log('Fetching questions from URL:', url); // Debugging log\r\n        const response = await fetch(url);\r\n        if (response.status === 429 && retryCount < 3) {\r\n          console.warn('Rate limit exceeded, retrying...');\r\n          setTimeout(() => fetchQuestions(retryCount + 1), 1000); // Retry after 1 second\r\n          return;\r\n        }\r\n        const data = await response.json();\r\n        console.log('API response:', data); // Debugging log\r\n        if (data.results && data.results.length > 0) {\r\n          setQuestions(data.results);\r\n          localStorage.setItem(`questions_${category}`, JSON.stringify(data.results));\r\n          setLoading(false);\r\n        } else {\r\n          throw new Error('No questions found');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching questions:', error); // Debugging log\r\n        setError('Failed to load questions. Please try again later.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [category]);\r\n\r\n  useEffect(() => {\r\n    if (timer > 0) {\r\n      const timerId = setInterval(() => setTimer(timer - 1), 1000);\r\n      return () => clearInterval(timerId);\r\n    } else {\r\n      handleNextQuestion();\r\n    }\r\n  }, [timer]);\r\n\r\n  useEffect(() => {\r\n    handleNextQuestion();\r\n  }, [handleNextQuestion]);\r\n\r\n  const handleAnswer = (answer) => {\r\n    setSelectedAnswer(answer);\r\n    setShowCorrectAnswer(true);\r\n    if (answer === questions[currentQuestionIndex].correct_answer) {\r\n      setScore(score + 1);\r\n      playCorrect();\r\n    } else {\r\n      playIncorrect();\r\n    }\r\n    setTimeout(() => {\r\n      setShowCorrectAnswer(false);\r\n      setSelectedAnswer(null);\r\n      handleNextQuestion();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleHint = () => {\r\n    setHintUsed(true);\r\n    // Logic to provide a hint (e.g., eliminate one incorrect answer)\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    if (questions.length > 0 && currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      setTimer(gameMode === 'hard' ? 15 : timeLimit);\r\n    } else {\r\n      endGame(score);\r\n    }\r\n  };\r\n\r\n  const toggleSettings = () => {\r\n    setSettingsOpen(!settingsOpen);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container>\r\n        <ClipLoader size={150} color={\"#007bff\"} loading={loading} />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container>\r\n        <ErrorMessage>{error}</ErrorMessage>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n  const answers = currentQuestion ? [...currentQuestion.incorrect_answers, currentQuestion.correct_answer].sort() : [];\r\n\r\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\r\n  const timerProgress = (timer / timeLimit) * 100;\r\n\r\n  return (\r\n    <Container>\r\n      <QuestionCard\r\n        initial={{ opacity: 0, y: -50 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        exit={{ opacity: 0, y: 50 }}\r\n        transition={{ duration: 0.5 }}\r\n      >\r\n        <ProgressBar>\r\n          <Progress initial={{ width: 0 }} animate={{ width: `${progress}%` }} />\r\n        </ProgressBar>\r\n        <TimerBar initial={{ width: '100%' }} animate={{ width: `${timerProgress}%` }} />\r\n        <h2>Question {currentQuestionIndex + 1}</h2>\r\n        <QuestionText>{currentQuestion.question}</QuestionText>\r\n        <div role=\"group\" aria-labelledby=\"question\">\r\n          {answers.map((answer, index) => (\r\n            <AnswerButton\r\n              key={index}\r\n              onClick={() => handleAnswer(answer)}\r\n              $correct={showCorrectAnswer && answer === currentQuestion.correct_answer}\r\n              $incorrect={showCorrectAnswer && answer === selectedAnswer && answer !== currentQuestion.correct_answer}\r\n              aria-pressed={selectedAnswer === answer}\r\n              aria-label={`Answer ${index + 1}: ${answer}`}\r\n            >\r\n              {answer}\r\n            </AnswerButton>\r\n          ))}\r\n        </div>\r\n        {!hintUsed && <HintButton onClick={handleHint}>Hint</HintButton>}\r\n        <Timer>Time left: {timer} seconds</Timer>\r\n        <Score>Score: {score}</Score>\r\n        <SettingsButton onClick={toggleSettings}>Settings</SettingsButton>\r\n        {settingsOpen && <SettingsPanel onSettingsChange={onSettingsChange} />}\r\n      </QuestionCard>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QuestionScreen;"],"names":["Panel","styled","div","_templateObject","_taggedTemplateLiteral","props","theme","background","color","_ref","onSettingsChange","darkMode","setDarkMode","useState","language","setLanguage","useEffect","_jsxs","children","_jsx","type","checked","onChange","e","target","value","Container","ErrorMessage","_templateObject2","QuestionCard","motion","_templateObject3","QuestionText","p","_templateObject4","AnswerButton","button","_templateObject5","$correct","$incorrect","Timer","_templateObject6","Score","_templateObject7","ProgressBar","_templateObject8","Progress","_templateObject9","TimerBar","_templateObject10","SettingsButton","_templateObject11","HintButton","_templateObject12","category","gameMode","timeLimit","endGame","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","timer","setTimer","loading","setLoading","error","setError","selectedAnswer","setSelectedAnswer","showCorrectAnswer","setShowCorrectAnswer","hintUsed","setHintUsed","settingsOpen","setSettingsOpen","playCorrect","useSound","correctSound","playIncorrect","incorrectSound","playBackground","stop","backgroundMusic","loop","fetchQuestions","async","retryCount","arguments","length","undefined","cachedQuestions","localStorage","getItem","concat","JSON","parse","url","console","log","response","fetch","status","warn","setTimeout","data","json","results","Error","setItem","stringify","timerId","setInterval","clearInterval","handleNextQuestion","ClipLoader","size","currentQuestion","answers","incorrect_answers","correct_answer","sort","progress","timerProgress","initial","opacity","y","animate","exit","transition","duration","width","question","role","map","answer","index","onClick","handleAnswer","handleHint","toggleSettings","SettingsPanel"],"sourceRoot":""}